---
apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
  labels:
    istio-injection: enabled
---
# Source: jenkins/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
---
# Source: jenkins/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
type: Opaque
data:
  jenkins-admin-password: "VzdENE9FVzBMRVJpbTRXOHpScVRiYg=="
  jenkins-admin-user: "YWRtaW4="
---
# Source: jenkins/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
data:
  apply_config.sh: |-
    set -e
    echo "disable Setup Wizard"
    # Prevent Setup Wizard when JCasC is enabled
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.UpgradeWizard.state
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.InstallUtil.lastExecVersion
    echo "deleting all XML config files"
    rm -f /var/jenkins_home/config.xml
    rm -f /var/jenkins_home/*plugins*.xml
    find /var/jenkins_home -maxdepth 1 -type f -iname '*configuration*.xml' -exec rm -f {} \;
    echo "download plugins"
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    version () { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
    if [ -f "/usr/share/jenkins/jenkins.war" ] && [ -n "$(command -v jenkins-plugin-cli)" 2>/dev/null ] && [ $(version $(jenkins-plugin-cli --version)) -ge $(version "2.1.1") ]; then
      jenkins-plugin-cli --verbose --war "/usr/share/jenkins/jenkins.war" --plugin-file "/var/jenkins_home/plugins.txt" --latest true;
    else
      /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    fi
    echo "copy plugins to shared volume"
    # Copy plugins to shared volume
    yes n | cp -i /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins/;
    echo "finished initialization"
  plugins.txt: |-
    configuration-as-code:1873.vea_5814ca_9c93
    git:5.5.2
    job-dsl:1.87
    kubernetes:4306.vc91e951ea_eb_d
    workflow-aggregator:600.vb_57cdd26fdd7
    antisamy-markup-formatter:162.v0e6ec0fcfcf6
    apache-httpcomponents-client-4-api:4.5.14-208.v438351942757
    asm-api:9.7.1-95.v9f552033802a_
    authentication-tokens:1.119.v50285141b_7e1
    bootstrap5-api:5.3.3-1
    bouncycastle-api:2.30.1.78.1-248.ve27176eb_46cb_
    branch-api:2.1202.vc51412f3ed84
    caffeine-api:3.2.0-161.v691ef352cee1
    cloudbees-folder:6.901.vb_4c7a_da_75da_3
    commons-lang3-api:3.17.0-84.vb_b_938040b_078
    commons-text-api:1.12.0-129.v99a_50df237f7
    credentials-binding:681.vf91669a_32e45
    credentials:1380.va_435002fa_924
    display-url-api:2.204.vf6fddd8a_8b_e9
    durable-task:581.v299a_5609d767
    font-awesome-api:6.6.0-2
    git-client:5.0.3
    gson-api:2.11.0-41.v019fcf6125dc
    instance-identity:201.vd2a_b_5a_468a_a_6
    ionicons-api:74.v93d5eb_813d5f
    jackson2-api:2.18.3-396.v93cc2d00b_b_7b_
    jakarta-activation-api:2.1.3-1
    jakarta-mail-api:2.1.3-1
    javax-activation-api:1.2.0-7
    jaxb:2.3.9-1
    joda-time-api:2.13.0-85.vb_64d1c2921f1
    json-api:20240303-41.v94e11e6de726
    kubernetes-client-api:6.10.0-240.v57880ce8b_0b_2
    kubernetes-credentials:190.v03c305394deb_
    mailer:488.v0c9639c1a_eb_3
    metrics:4.2.21-458.vcf496cb_839e4
    mina-sshd-api-common:2.14.0-143.v2b_362fc39576
    mina-sshd-api-core:2.14.0-143.v2b_362fc39576
    okhttp-api:4.11.0-172.vda_da_1feeb_c6e
    pipeline-build-step:540.vb_e8849e1a_b_d8
    pipeline-groovy-lib:745.vdf6077913de0
    pipeline-input-step:508.v584c0e9a_2177
    pipeline-milestone-step:119.vdfdc43fc3b_9a_
    pipeline-model-api:2.2218.v56d0cda_37c72
    pipeline-model-definition:2.2218.v56d0cda_37c72
    pipeline-model-extensions:2.2218.v56d0cda_37c72
    pipeline-stage-step:312.v8cd10304c27a_
    pipeline-stage-tags-metadata:2.2218.v56d0cda_37c72
    plain-credentials:183.va_de8f1dd5a_2b_
    plugin-util-api:4.1.0
    prism-api:1.29.0-18
    scm-api:696.v778d637b_a_762
    script-security:1369.v9b_98a_4e95b_2d
    snakeyaml-api:2.3-123.v13484c65210a_
    ssh-credentials:349.vb_8b_6b_9709f5b_
    structs:338.v848422169819
    variant:60.v7290fc0eb_b_cd
    workflow-api:1336.vee415d95c521
    workflow-basic-steps:1058.vcb_fc1e3a_21a_9
    workflow-cps:4000.v5198556e9cea_
    workflow-durable-task-step:1378.v6a_3e903058a_3
    workflow-job:1400.v7fd111b_ec82f
    workflow-multibranch:773.vc4fe1378f1d5
    workflow-scm-step:427.v4ca_6512e7df1
    workflow-step-api:678.v3ee58b_469476
    workflow-support:936.v9fa_77211ca_e1
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "jenkins-jenkins-config-creds"
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
    jenkins-jenkins-config: "true"
data:
  creds.yaml: |-
    credentials:
      system:
        domainCredentials:
          - credentials:
              - usernamePassword:
                  scope: GLOBAL
                  id: "github-pat"
                  username: "tembleking"
                  password: "you found it!"
                  description: "GitHub Personal Access Token"
              - string:
                  scope: GLOBAL
                  id: "okta-api-token"
                  secret: ""
                  description: "Super admin in Okta"
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "jenkins-jenkins-config-job-deactivate-okta-users"
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
    jenkins-jenkins-config: "true"
data:
  job-deactivate-okta-users.yaml: |-
    jobs:
      - script: |-
          job('DeactivateOktaUsers') {
            description('Job to deactivate Okta users that are not present in the API endpoint')
    
            parameters {
              stringParam('API_ENDPOINT', 'https://api.mycompany.com/active-users', 'API endpoint to retrieve the active users list')
            }
    
            triggers {
              cron('H 3 * * *') // Runs daily at 3 AM
            }
    
            wrappers {
              credentialsBinding {
                string('OKTA_API_TOKEN', 'okta-api-token')
              }
            }
    
            steps {
              shell('''#!/bin/bash
          # Retrieve the active users from the API endpoint
          active_users=$(curl -s $API_ENDPOINT | jq -r '.activeUsers[]')
          echo "Active users: $active_users"
    
          # Retrieve the current users from Okta using an external script
          okta_users=$(./scripts/get_okta_users.sh --token "$OKTA_API_TOKEN")
          echo "Okta users: $okta_usersYouTube"
    
          # Loop through Okta users and deactivate those not in the active users list
          for user in $okta_users; do
            if ! echo "$active_users" | grep -wq "$user"; then
              echo "Deactivating user: $user"
              ./scripts/deactivate_okta_user.sh --user "$user" --token "$OKTA_API_TOKEN"
            fi
          done
          ''')
            }
    
            publishers {
              archiveArtifacts('**/logs/**')
            }
          }
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "jenkins-jenkins-jcasc-config"
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
    jenkins-jenkins-config: "true"
data:
  jcasc-default-config.yaml: |-
    jenkins:
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
      securityRealm:
        local:
          allowsSignup: false
          enableCaptcha: false
          users:
            - id: "admin"
              name: "Jenkins Admin"
              password: "vulhub"
      disableRememberMe: false
      mode: NORMAL
      numExecutors: 0
      labelString: ""
      projectNamingStrategy: "standard"
      markupFormatter:
        plainText
      clouds:
      - kubernetes:
          containerCapStr: "10"
          defaultsProviderTemplate: ""
          connectTimeout: "5"
          readTimeout: "15"
          jenkinsUrl: "http://jenkins.jenkins.svc.cluster.local:8080"
          jenkinsTunnel: "jenkins-agent.jenkins.svc.cluster.local:50000"
          maxRequestsPerHostStr: "32"
          retentionTimeout: "5"
          waitForPodSec: "600"
          name: "kubernetes"
          namespace: "jenkins"
          restrictedPssSecurityContext: false
          serverUrl: "https://kubernetes.default"
          credentialsId: ""
          podLabels:
          - key: "jenkins/jenkins-jenkins-agent"
            value: "true"
          templates:
            - name: "default"
              namespace: "jenkins"
              id: 14bc718b11f9a4cea39e9531ec6db3e728e1a56afb6cae41fdbcc4455bb0e611
              containers:
              - name: "jnlp"
                alwaysPullImage: false
                args: "^${computer.jnlpmac} ^${computer.name}"
                envVars:
                  - envVar:
                      key: "JENKINS_URL"
                      value: "http://jenkins.jenkins.svc.cluster.local:8080/"
                image: "jenkins/inbound-agent:3206.vb_15dcf73f6a_9-3"
                privileged: "false"
                resourceLimitCpu: 512m
                resourceLimitMemory: 512Mi
                resourceRequestCpu: 512m
                resourceRequestMemory: 512Mi
                ttyEnabled: false
                workingDir: /home/jenkins/agent
              idleMinutes: 0
              instanceCap: 2147483647
              label: "jenkins-jenkins-agent "
              nodeUsageMode: "NORMAL"
              podRetention: Never
              showRawYaml: true
              serviceAccount: "default"
              slaveConnectTimeoutStr: "100"
              yamlMergeStrategy: override
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
    security:
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
    unclassified:
      location:
        url: http://jenkins:8080
---
# Source: jenkins/templates/home-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: jenkins/templates/rbac.yaml
# This role is used to allow Jenkins scheduling of agents via Kubernetes plugin.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-schedule-agents
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods", "pods/exec", "persistentvolumeclaims"]
  verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: jenkins/templates/rbac.yaml
# The sidecar container which is responsible for reloading configuration changes
# needs permissions to watch ConfigMaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-casc-reload
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]
---
# Source: jenkins/templates/rbac.yaml
# We bind the role to the Jenkins service account. The role binding is created in the namespace
# where the agents are supposed to run.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-schedule-agents
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-schedule-agents
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
---
# Source: jenkins/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-watch-configmaps
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-casc-reload
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
---
# Source: jenkins/templates/jenkins-agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins-agent
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  ports:
    - port: 50000
      targetPort: 50000
      name: agent-listener
  selector:
    "app.kubernetes.io/component": "jenkins-controller"
    "app.kubernetes.io/instance": "jenkins"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-controller-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
  selector:
    "app.kubernetes.io/component": "jenkins-controller"
    "app.kubernetes.io/instance": "jenkins"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-controller-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-5.1.15"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins"
    "app.kubernetes.io/component": "jenkins-controller"
spec:
  serviceName: jenkins
  replicas: 1
  selector:
    matchLabels:
      "app.kubernetes.io/component": "jenkins-controller"
      "app.kubernetes.io/instance": "jenkins"
  template:
    metadata:
      labels:
        "app.kubernetes.io/name": 'jenkins'
        "app.kubernetes.io/managed-by": "Helm"
        "app.kubernetes.io/instance": "jenkins"
        "app.kubernetes.io/component": "jenkins-controller"
      annotations:
        checksum/config: 859d990c10f4f7d4c65b0e04f570e928d977fa543b74f34d2afd3f8227b1f798
    spec:
      securityContext:
    
        runAsUser: 1000
        fsGroup: 1000
        runAsNonRoot: true
      serviceAccountName: "jenkins"
      initContainers:
        - name: config-reload-init
          image: "docker.io/kiwigrid/k8s-sidecar:1.27.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LABEL
              value: "jenkins-jenkins-config"
            - name: FOLDER
              value: "/var/jenkins_home/casc_configs"
            - name: NAMESPACE
              value: 'jenkins'
            - name: METHOD
              value: "LIST"
        
          resources:
            {}
          volumeMounts:
            - name: sc-config-volume
              mountPath: "/var/jenkins_home/casc_configs"
            - name: jenkins-home
              mountPath: /var/jenkins_home

        - name: "init"
          image: "docker.io/vulhub/jenkins:2.441"
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsUser: 1000
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: /var/jenkins_config
              name: jenkins-config
            - mountPath: /usr/share/jenkins/ref/plugins
              name: plugins
            - mountPath: /var/jenkins_plugins
              name: plugin-dir
            - mountPath: /tmp
              name: tmp-volume
      containers:
        - name: jenkins
          image: "docker.io/vulhub/jenkins:2.441"
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsUser: 1000
          args: [ "--httpPort=8080"]
          env:
            - name: DEFAULT_USER
              value: admin
            - name: DEFAULT_PASS
              value: vulhub
            - name: SECRETS
              value: /run/secrets/additional
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_OPTS
              value: >-
                 -Dcasc.reload.token=$(POD_NAME) 
            - name: JENKINS_OPTS
              value: >-
                 --webroot=/var/jenkins_cache/war 
            - name: JENKINS_SLAVE_AGENT_PORT
              value: "50000"

            - name: CASC_JENKINS_CONFIG
              value: /var/jenkins_home/casc_configs
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: agent-listener
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: '/login'
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: '/login'
              port: http
            initialDelaySeconds: null
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: '/login'
              port: http
            initialDelaySeconds: null
            periodSeconds: 10
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            - mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            - mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            - name: sc-config-volume
              mountPath: /var/jenkins_home/casc_configs
            - name: jenkins-secrets
              mountPath: /run/secrets/additional
              readOnly: true
            - name: jenkins-cache
              mountPath: /var/jenkins_cache
            - mountPath: /tmp
              name: tmp-volume
        - name: config-reload
          image: "docker.io/kiwigrid/k8s-sidecar:1.27.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LABEL
              value: "jenkins-jenkins-config"
            - name: FOLDER
              value: "/var/jenkins_home/casc_configs"
            - name: NAMESPACE
              value: 'jenkins'
            - name: REQ_URL
              value: "http://localhost:8080/reload-configuration-as-code/?casc-reload-token=$(POD_NAME)"
            - name: REQ_METHOD
              value: "POST"
            - name: REQ_RETRY_CONNECT
              value: "10"
        
          resources:
            {}
          volumeMounts:
            - name: sc-config-volume
              mountPath: "/var/jenkins_home/casc_configs"
            - name: jenkins-home
              mountPath: /var/jenkins_home

      volumes:
      - name: plugins
        emptyDir: {}
      - name: jenkins-config
        configMap:
          name: jenkins
      - name: plugin-dir
        emptyDir: {}
      - name: jenkins-secrets
        projected:
          sources:
          - secret:
              name: jenkins
              items:
                - key: jenkins-admin-user
                  path: chart-admin-username
                - key: jenkins-admin-password
                  path: chart-admin-password
      - name: jenkins-cache
        emptyDir: {}
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins
      - name: sc-config-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
---
# Source: jenkins/templates/tests/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-tests
  namespace: jenkins
  annotations:
    "helm.sh/hook": test
data:
  run.sh: |-
    @test "Testing Jenkins UI is accessible" {
      curl --retry 48 --retry-delay 10 jenkins:8080/login
    }
---
# Source: jenkins/templates/tests/jenkins-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "jenkins-ui-test-dqyfr"
  namespace: jenkins
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: "test-framework"
      image: "docker.io/bats/bats:1.11.0"
      command:
        - "bash"
        - "-c"
      args:
        - |
          # copy bats to tools dir
          set -ex
          cp -R /opt/bats /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: jenkins-ui-test
      image: "docker.io/vulhub/jenkins:2.441"
      command: ["/tools/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: jenkins-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-dandelion-connection-to-jenkins
  namespace: jenkins
spec:
  action: DENY
  rules:
  - from:
    - source:
        namespaces: ["dandelion"]
